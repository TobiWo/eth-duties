{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"eth-duties","text":"<p>ETH-duties logs upcoming validator duties to the console in order to find the best maintenance period for your validator(s). In general the tool was developed to mainly help home stakers but it still can be used on a larger scale (see usage examples for the binary and docker).</p> <p>Note on docker <code>latest</code> tag: Currently the docker image tag <code>latest</code> refers to the latest changes on the <code>main</code> branch. Please be aware of that if you decide to use this tag.</p>"},{"location":"#consensus-client-compatibility","title":"Consensus client compatibility","text":"client tested compatible prysm lighthouse teku nimbus lodestar grandine"},{"location":"#caveat","title":"Caveat","text":""},{"location":"#lodestar","title":"Lodestar","text":"<p>If you're using Lodestar as a beacon client and need to track hundreds of validators, you may encounter an issue when providing validator identifiers as public keys. While I don't have the exact threshold, sending around 200 validator public keys to Lodestar's beacon API endpoints can overwhelm the system. However, using validator indices does not cause this problem.</p> <p>It's important to note that when you use the <code>--validator-nodes</code> option, eth-duties will only utilize public keys internally, which can lead to the issue mentioned above. If you see many public keys in the error log with the message: \"The following provided validators are not active and therefore will be skipped for further processing,\" this could indicate the problem discussed.</p>"},{"location":"#what-to-expect","title":"What to expect","text":"<p>Beside the actual functionality of logging upcoming duties I added some kind of UX in form of color coding.</p> <p>The color coding comprises of:</p> Color Description GREEN Indicates upcoming block proposer duties YELLOW The upcoming duty will be performed in less than a defined timeframe (default 2 minutes) or your validator was chosen to be part in the next sync committee RED The upcoming duty will be performed in less than a defined timeframe (default 1 minute) or your validator is part of the current sync committee"},{"location":"#examples","title":"Examples","text":"<ol> <li>Attestion duties for some validators </li> <li>Block proposing duties for some validators </li> <li>Sync committee duties for some validators </li> </ol>"},{"location":"#donate","title":"Donate","text":"<p>If you like the tool and think this needs to be supported I highly appreciate any donations. Donations can be send in ETH, any ERC-20 or on Layer2 to the following address: <code>0x89a6EeC1FAbC802741475259cBdeAC7d45FAc14a</code>.</p>"},{"location":"#full-disclosure","title":"Full disclosure","text":"<p>This project is funded by the Ethereum Foundation with a small grant from the ecosystem support program.</p>"},{"location":"contribute/","title":"Contribute","text":"<p>If you want to contribute you need to setup the project which is described in this section.</p>"},{"location":"contribute/#requirements","title":"Requirements","text":"<ul> <li><code>Python 3.12 or higher</code></li> <li>in general it is recommended to work with virtual environments instead of a global python installation. This is out of scope of this documentation.</li> </ul>"},{"location":"contribute/#installation","title":"Installation","text":"<p>Dependencies are organized and managed using poetry. Poetry itself needs <code>Python 3.8</code> or later.</p> <p>My personal workflow to manage virtual environments is to use miniconda/Anaconda, therefore the steps described are based on this toolchain.</p> <ol> <li>Navigate to the root folder of the repository</li> <li> <p>Create new conda environment with poetry</p> <pre><code>conda env create -f poetry_env.yaml\n</code></pre> </li> <li> <p>Activate your newly created conda environment</p> <pre><code>conda activate poetry-py310\n</code></pre> </li> <li> <p>List your Python environments with poetry</p> <pre><code>poetry env info\n# You will receive a Python System and Virtualenv output\n</code></pre> </li> <li> <p>Create a separate poetry virtual env</p> <pre><code># Create a poetry virtual env while using the executable/binary path of the virtualenv output of the command before\npoetry env use &lt;PATH_TO_PYTHON_EXECUTABLE_OF_VIRTUALENV&gt;\n</code></pre> </li> <li> <p>Install dependencies</p> <pre><code># Installs all dependencies\npoetry install\n\n# Installs only dependencies for running the application\npoetry install --only main\n</code></pre> </li> </ol>"},{"location":"contribute/#code-quality","title":"Code quality","text":"<p>Please run the following formatter and linter and fix respective issues in order to keep code quality high. You can also install IDE integrations if available.</p> <pre><code># From the root of the repository\npoetry run black duties/\npoetry run pylint duties/\npoetry run pydoclint --style=google duties/\n</code></pre>"},{"location":"test/","title":"Testing","text":"<p>Currently, there are no unit tests available for eth-duties. This is mainly because testing Python CLI applications is difficult. Additionally, it would be simpler to conduct tests if eth-duties utilized <code>clique</code> instead of <code>argparse</code> as its CLI parser, as <code>pytest</code>, a prominent Python testing framework, offers specific test functions for <code>clique</code>. However, switching to <code>clique</code> would require completely redesigning the application, which isn't practical at the moment.</p> <p>Given these constraints, I've opted to develop integration tests instead. Fortunately, eth-duties primarily logs its findings to the console, allowing for the testing of most functionalities by monitoring these logs. I've created a simple test framework for this purpose. The approximate workflow is as follows:</p> <ol> <li>Start eth-duties in the background</li> <li>Scan the logs</li> <li>Stop the process on specific trigger log</li> <li>Compare fetched logs with expected logs</li> </ol>"},{"location":"test/#local-devnet","title":"Local devnet","text":"<p>You can run the integration test suite against any real world Ethereum network (mainnet, Holesky etc.). However, since the increased undeterministic properties of these networks, tests might fail which normally wouldn't fail. Therefore I added a config yaml for the <code>ethereum-package</code> for <code>kurtosis cli</code> with which you can easily start an own local devnet which is much more predictable in terms of network properties.</p>"},{"location":"test/#setup","title":"Setup","text":"<ol> <li>Install kurtosis cli</li> <li>Update client image tags in <code>./test/ethereum-devnet-tags.env</code> if outdated</li> <li> <p>Fire up the devnet from the root of the <code>eth-duties</code> repository and cleanup env variables as well as repo from temp config file:</p> <ul> <li>Note: The command may or may not work on gitbash for Windows but it is only tested on Linux (Ubuntu)</li> </ul> <pre><code>export $(grep -v '^#' ./test/ethereum-devnet-tags.env | xargs) &amp;&amp; \\\ncat ./test/ethereum-devnet.yaml | envsubst &gt; ./test/ethereum-devnet-replace.yaml &amp;&amp; \\\nkurtosis run --image-download always --enclave eth-duties-devnet github.com/ethpandaops/ethereum-package --args-file ./test/ethereum-devnet-replace.yaml &amp;&amp; \\\nrm ./test/ethereum-devnet-replace.yaml &amp;&amp; \\\nunset $(grep -v '^#' ./test/ethereum-devnet-tags.env | sed -E 's/(.*)=.*/\\1/' | xargs)\n</code></pre> </li> </ol>"},{"location":"test/#configure-tests","title":"Configure tests","text":"<p>There is a <code>config.toml</code> availabe in the test folder. The already present values will work for the aforementioned local devnet created with <code>kurtosis cli</code>. If you want to run the tests against a public network adapt the values accordingly. Note: Values for validators which are in the sync committee or are about to propose a block are not provided as their status keeps changing constantly, even on the local devnet.</p>"},{"location":"test/#get-specific-validators-for-config","title":"Get specific validators for config","text":"<p>In order to run the test suite you need to populate the <code>config.toml</code> properties. It is a bit complex to get correct values for the following properties:</p> <ul> <li>in-sync-committee</li> <li>next-sync-committee</li> <li>not-in-sync-committee-not-proposing</li> <li>proposing-blocks</li> </ul> <p>In the following chapters I describe how to get these values for a local devnet. You need to send some REST calls to your beacon node like <code>eth-duties</code> does it as well. Additionally, some calls refer to <code>CONTENT_OF_CURL_TEST_DATA_FILE</code> which is located here: <code>test/data/curl-test-data</code>. Just copy the content and paste it into the quotes of the respective data flag. If you run the test suite against a real world network you need to adapt the test data.</p> <p>You need to retrieve the current epoch for all of the below calls. The easiest way to get the current epoch of your local devnet is to use dora, a simple beachon chain explorer. To get the port were dora is exposed to just run:</p> <pre><code>kurtosis enclave inspect eth-duties-devnet\n</code></pre>"},{"location":"test/#validators-in-current-sync-committee","title":"Validators in current sync committee","text":"<ol> <li>Get the current epoch for your local devnet via dora</li> <li> <p>Send <code>POST</code> call:</p> <pre><code>curl --location 'http://127.0.0.1:&lt;BEACON_NODE_API_PORT&gt;/eth/v1/validator/duties/sync/&lt;CURRENT_EPOCH&gt;' \\\n--header 'Content-Type: application/json' \\\n--data 'CONTENT_OF_CURL_TEST_DATA_FILE'\n</code></pre> </li> <li> <p>Extract as many validator indices as you like and add to <code>config.toml</code></p> </li> </ol>"},{"location":"test/#validators-in-next-sync-committee","title":"Validators in next sync committee","text":"<p>If you just started a fresh local devnet the values can be the same as above. The background is that validators will be the same at least for the first two sync committee periods. It is unclear at which point different indices are chosen as these are protocol genesis specifics which are out of my knowledge.</p> <p>If you keep your devnet running for a longer time the procedure would be the following:</p> <ol> <li>Get the current epoch via e.g. beaconcha.in for public networks or dora for your local devnet</li> <li> <p>Send <code>POST</code> call:</p> <pre><code>curl --location 'http://127.0.0.1:&lt;BEACON_NODE_API_PORT&gt;/eth/v1/validator/duties/sync/&lt;CURRENT_EPOCH+256&gt;' \\\n--header 'Content-Type: application/json' \\\n--data 'CONTENT_OF_CURL_TEST_DATA_FILE'\n</code></pre> </li> <li> <p>Extract as many validator indices as you like and add to <code>config.toml</code></p> </li> </ol>"},{"location":"test/#validators-not-in-any-sync-committee-and-not-proposing-blocks","title":"Validators not in any sync committee and not proposing blocks","text":"<ol> <li>Just use the output of the aforementioned calls and find validator indices which are neither in the current nor in the next sync committee</li> <li>Get the current epoch via e.g. beaconcha.in for public networks or dora for your local devnet</li> <li> <p>Send <code>GET</code> calls:</p> <pre><code>curl --location 'http://127.0.0.1:&lt;BEACON_NODE_API_PORT&gt;/eth/v1/validator/duties/proposer/&lt;CURRENT_EPOCH&gt;'\ncurl --location 'http://127.0.0.1:&lt;BEACON_NODE_API_PORT&gt;/eth/v1/validator/duties/proposer/&lt;CURRENT_EPOCH+1&gt;'\n</code></pre> </li> <li> <p>Find indices which are not in any sync committee and will not propose a block in the current and upcoming epoch</p> </li> <li>Extract as many validator indices as you like and add to <code>config.toml</code></li> </ol>"},{"location":"test/#validators-which-will-propose-a-block","title":"Validators which will propose a block","text":"<ol> <li>Get the current epoch via e.g. beaconcha.in for public networks or dora for your local devnet</li> <li> <p>Send <code>GET</code> call:</p> <pre><code>curl --location 'http://127.0.0.1:&lt;BEACON_NODE_API_PORT&gt;/eth/v1/validator/duties/proposer/&lt;CURRENT_EPOCH+1&gt;'\n</code></pre> </li> <li> <p>Extract as many validator indices as you like and add to <code>config.toml</code></p> <ul> <li>I recommend to extract validator indices from the end of the returned list as these are the ones which will propose a block in the most distant future (running the suite may take some time so it is a good idea to have a time buffer)</li> </ul> </li> </ol>"},{"location":"test/#run-tests","title":"Run tests","text":"<p>You need to install all dependencies and setup the project by following the contribution guideline. Once that is finished and the <code>config.toml</code> is populated you can start the test suite with:</p> <pre><code>poetry run python test/run_tests.py\n</code></pre>"},{"location":"test/#known-issues","title":"Known issues","text":""},{"location":"test/#false-negatives","title":"False negatives","text":"<p>If you connect to a real world network like Holesky you can't predict the outcome to 100%. This is especially true when your beacon node is under heavy load already. You need to consider that when you see failing tests. This does not necessarily mean that a specific functionality is broken.</p> <p>There are three ways to check if a test really failed:</p> <ol> <li>Repeat the test on it's own by commenting out all other tests in <code>test/run_tests.py</code></li> <li>Activate debugging (print fetched logs to the console) while set the debug setting in <code>config.toml</code> to true<ul> <li>with debugging active you can check the expected logs (see <code>cases</code> folder) and compare them with the actual logs</li> </ul> </li> <li>Run test suite against a local devnet</li> </ol>"},{"location":"test/#bugs","title":"Bugs","text":"<p>The test suite already revealed a bug which results in one failing test (test: test_get_sync_committee_duties_from_rest_endpoint) if you run the suite against a local devnet which is running for less than 24h. Find more details via the link above.</p>"},{"location":"configuration/beacon-nodes/","title":"Beacon nodes","text":"<p>This option accepts a comma separated list of beacon nodes which will be used to fetch the necessary duty data.</p> <p>The list should be in the following format:</p> <ul> <li><code>--beacon-nodes http://localhost:5052,http://localhost:5051,...</code></li> </ul> <p>The first beacon node in the provided list which is ready to accept requests is used for every API call as long as it stays ready. If this changes the next ready node will be used and so on and so forth.</p>"},{"location":"configuration/general/","title":"Configuration","text":"<p>Most of the available flags are self explanatory. However, some may not be that obvious. Those flags are described in the respective subchapter.</p> <p>For all available cli flags please call <code>eth-duties --help</code> or check the table below. See usage examples for further details.</p>"},{"location":"configuration/general/#available-cli-flags","title":"Available CLI flags","text":"flag description extended description <code>-h</code> / <code>--help</code> Show all available cli flags <code>--beacon-nodes</code> Comma separated list of URLs to access the beacon node api (default: http://localhost:5052) link <code>--interval</code> Interval in seconds for fetching data from the beacon node (default: 15) <code>--log</code> Defines log level. Values are 'DEBUG' or 'INFO' (default: 'INFO') <code>--log-pubkeys</code> If supplied the validator index will be replaced with the pubkey in log messages <code>--log-color-warning</code> The logging color as hex or rgb code for warning logs (default: '255,255,0' - yellow) link <code>--log-color-critical</code> The logging color as hex or rgb code for critical logs (default: '255, 0, 0' - red) link <code>--log-color-proposing</code> The logging color as hex or rgb code for proposing duty logs (default: '0, 128, 0' - green) link <code>--log-time-warning</code> The threshold at which a time to duty warning log (in seconds) will be colored in YELLOW (default: 120) link <code>--log-time-critical</code> The threshold at which a time to duty critical log (in seconds) will be colored in RED (default: 60) <code>--max-attestation-duty-logs</code> The max. number of validators for which attestation duties will be logged (default: 50) <code>--mode</code> The mode which eth-duties will run with. Values are 'log', 'no-log', 'cicd-exit', 'cicd-wait' or 'cicd-force-graceful-exit' (default: 'log') link <code>--mode-cicd-waiting-time</code> The max. waiting time until eth-duties exits in cicd-wait mode (default 780 sec. (approx. 2 epochs)) link <code>--mode-cicd-attestation-time</code> If a defined proportion of attestion duties is above the defined time threshold the application exits gracefully in any cicd-mode (default 240 sec.) link <code>--mode-cicd-attestation-proportion</code> The proportion of attestation duties which needs to be above a defined time threshold to force the application to exit gracefully (default 1) link <code>--omit-attestation-duties</code> If supplied upcoming attestation duties will not be logged to the console <code>--rest</code> Starts a rest server on port 5000 link <code>--rest-host</code> Host from which requests will be accepted (default 0.0.0.0) link <code>--rest-port</code> Port where the rest server is exposed (default 5000) link <code>--validators</code> One or many validator identifiers for which next duties will be fetched (argument can be provided multiple times) link <code>--validators-file</code> File with validator identifiers where every identifier is on a separate line link <code>--validator-nodes</code> Path to file with validator node urls and respective bearer tokens to observe validator identifiers which are managed by the respective node. Url and bearer are separated by semicolon. Each <code>URL;BEARER</code> pair is on one line link <code>--validator-update-interval</code> Interval (in minutes) on which validator identifier status and identifiers provided via '--validator-nodes' are updated (default 1440 minutes -&gt; 1 day) link"},{"location":"configuration/log-colors/","title":"Log colors","text":"<p>You can customize logging colors for all duty related logs with the following flags:</p> <ul> <li><code>--log-color-warning</code><ul> <li>affects duty logs where <code>--log_time_critical</code> &lt; TIME_TO_DUTY &lt;= <code>--log-time-warning</code></li> <li>affects sync committee duty logs when your validators will be in the next sync committee</li> </ul> </li> <li><code>--log-color-critical</code><ul> <li>affects duty logs where TIME_TO_DUTY &lt;= <code>--log-time-critical</code></li> <li>affects sync committee duty logs when your validators are in the current sync committee</li> </ul> </li> <li><code>--log-color-proposing</code><ul> <li>affects proposing duty logs where TIME_TO_DUTY &gt; <code>--log-time-warning</code></li> </ul> </li> </ul> <p>You can use hex or rgb color codes for setting a respective color. The format needs to be:</p> <ul> <li>rgb: <code>255,255,255</code></li> <li>hex: <code>#FFFFFF</code></li> </ul>"},{"location":"configuration/log-colors/#note-on-hex-format","title":"Note on hex format","text":"<p>If you use hex format you need to wrap the hex code in <code>\"\"</code> or <code>''</code> or separate the flag and the value with an <code>=</code>. This leads to the following possible formatting styles:</p> <ul> <li><code>--log-color-warning=#FFFFFF</code></li> <li><code>--log-color-warning \"#FFFFFF\"</code></li> <li><code>--log-color-warning '#FFFFFF'</code></li> </ul>"},{"location":"configuration/log-time/","title":"Log time","text":"<p>The flag <code>--log-time-warning</code> is used as a threshold to color warning logs in a specified color. However, it is also used to log the proportion of all duties which will be executed after <code>--log-time-warning</code>. The log includes sync-committee and proposing duties and therefore is different from --mode-cicd-attestation-time which is specific for the cicd modes. The idea is to get some general info on the number of upcoming duties.</p>"},{"location":"configuration/log-time/#example","title":"Example","text":"<ul> <li>validator1 is in current sync committee (next sync committe starts in 3h)</li> <li>validator2 is in next sync committee (next sync committe starts in 3h)</li> <li>validator1 has attestation duty in 02:41 min.</li> <li>validator4 has attestation duty in 03:11 min.</li> <li>validator4 has proposing duty in 03:33 min.</li> <li>validator2 has attestation duty in 04:41 min.</li> <li>validator3 has attestation duty in 04:45 min.</li> </ul> <pre><code># Assumed setting:\n./eth-duties --log-time-warning 180 ...\n# The log would be\n71.43% of all duties will be executed in 180.0 sec. or later\n</code></pre> <pre><code># Assumed setting:\n./eth-duties --log-time-warning 300 ...\n# The log would be\n14.29% of all duties will be executed in 300.0 sec. or later\n# In this case only the next committee duty will be executed in 300 secs or later\n</code></pre>"},{"location":"configuration/mode/","title":"Mode","text":"<p>The default running mode of <code>eth-duties</code> is logging duties to the console (specified with value <code>log</code>). However, professional node operators or advanced home stakers might leverage the tool in their cicd pipelines to e.g. prevent an unintentional client update when your validator is right before proposing a block or part of the sync committee. This is where the different <code>cicd</code> modes come into play. You can make your deployment job dependent from the <code>eth-duties</code> job so that the deployment job will only run when <code>eth-duties</code> exits gracefully with <code>exit code 0</code>. This documentation will not go into detail about advanced pipelines in gitlab or github. However, I provide a separate <code>cicd-compose.yaml</code> (in docker folder) which may be adopted by home stakers.</p> <p>Note If you do not omit attestation duties with <code>--omit-attestation-duties</code> these are also considered as valid duties for the cicd modes. For a more fine granular setting on attestation duties please check the chapter about --mode-cicd-attestation-time and --mode-cicd-attestation-proportion</p>"},{"location":"configuration/mode/#what-are-relevant-duties","title":"What are relevant duties","text":"<p>In the following sub chapters I will often refer to relevant duties. This is a short explanation. Relevant are:</p> <ul> <li>validator is in current sync committee</li> <li>validator is in next sync committee</li> <li>validator will propose a block</li> <li>x of y attestation duties (while y == number of validators monitored) need to be executed in less than a defined time threshold<ul> <li>see chapter about --mode-cicd-attestation-time and --mode-cicd-attestation-proportion</li> </ul> </li> </ul>"},{"location":"configuration/mode/#modes","title":"Modes","text":""},{"location":"configuration/mode/#cicd-exit","title":"cicd-exit","text":"<p>This mode results in a one time check whether one of your supplied validators has an relevant upcoming duty. If there is one the tool exits with <code>exit code 1</code>. If there is none the tool exits with <code>exit code 0</code>.</p>"},{"location":"configuration/mode/#cicd-wait","title":"cicd-wait","text":"<p>This mode results in an ongoing process (similar to the standard behavior) where <code>eth-duties</code> checks for relevant upcoming duties until there is none. If there will be no relevant upcoming duty the application exits with <code>exit code 0</code>. Compared to the standard logging behavior this process only runs for a certain amount of time (specified with flag <code>--mode-cicd-waiting-time</code> (default: 780 seconds, approx. 2 epochs)). If this timeframe ends, <code>eth-duties</code> exits with <code>exit code 1</code>.</p>"},{"location":"configuration/mode/#cicd-force-graceful-exit","title":"cicd-force-graceful-exit","text":"<p>This mode results in an immediate graceful exit with <code>exit code 0</code> without checking for duties. The rationale behind this flag is the following: If your deployment job will not run because of upcoming duties but you need to force an update for whatever reason you can use the mode <code>cicd-force-graceful-exit</code>. I'm not an expert in github pipelines but in gitlab you can prefill environment variables when you start a pipeline manually via the web ui. This way you don't need to adapt your pipeline code but just restart a pipeline with the <code>cicd-force-graceful-exit</code> mode. In general how to setup your pipelines is out of scope of this documentation. For more information please check the respective platform documentation. For gitlab this would be the following website.</p>"},{"location":"configuration/mode/#mode-cicd-attestation-time-and-mode-cicd-attestation-proportion","title":"mode-cicd-attestation-time and mode-cicd-attestation-proportion","text":"<p>These flags can be specifically useful for home stakers with a small amount of validators while using any cicd mode (<code>cicd-exit</code> or <code>cicd-wait</code>). The idea is that a home staker with a small amount of validators most often handles attestation duties and it might be hard to figure out manually when to perform e.g. a client update so that you only miss the minimum amount of attestation duty rewards or even none. It is important to note that upcoming sync-committee or block proposal duties are considered relevant in any way. This means <code>eth-duties</code> will always exits non-gracefully in mode <code>cicd-exit</code> and <code>cicd-wait</code> (when waiting threshold is reached) while one of these relevant duties is in the queue. In other words if your settings for monitoring attesation duties are matched it will get ignored when another relevant duty is in the queue.</p> <p>In general both flags refer to the fact that <code>eth-duties</code> will exit gracefully when the defined proportion of attestion duties will be executed after the provided time threshold. Let's check an example to get a better understanding. We assume a home staker who runs 10 validators:</p> <ul> <li> <p>You want to exit <code>eth-duties</code> gracefully when 8/10 validator attestation duties need to be executed in 4 minutes or later:</p> <pre><code>--mode cicd-wait --mode-cicd-attestation-time 240 --mode-cicd-attestation-proportion 0.8\n</code></pre> </li> </ul> <p>For more clarity please check the <code>cicd-attestation-compose.yaml</code> within the docker folder.</p> <p>These new flags will be only useful until a certain threshold of monitored validators is reached. This is because the higher the number of validators monitored the smaller the probability that a defined proportion of validator attestation duties will happen at a specified time in the future or later. To be more precise let's consider you monitor 30 validators. If you set the new flags to <code>--mode-cicd-attestation-time 240 --mode-cicd-attestation-proportion 0.8</code> it might never happen that 80% of attestation duties need to be performed in 4 minutes or later. You could reduce the proportion or/and time value but at some point these will not bring any value for you. You need to test a little bit what could be a good setting for your setup.</p>"},{"location":"configuration/restful-api/","title":"RESTful API","text":"<p>Eth-duties offers the possibility to start a rest server with some basic endpoints. This is a very simple implemenation which starts a rest server on your localhost. The server can be started with flag <code>--rest</code>. The port can be modified with <code>--rest-port</code>. Additionally you can change the host from which connections are accepted with <code>--rest-host</code>. The full swagger spec can be accessed (using default port 5000) via http://localhost:5000/docs.</p> <p>This functionality can be used to e.g. create own automation scripts for updating your Ethereum clients.</p> <p>Beside that it is now also possible to add and remove validator identifiers via rest calls. Some notes for these endpoints:</p> <ol> <li>You will receive a 201 (ADD) or 200 (DELETE) with the corresponding added/deleted validator identifiers<ul> <li>If the number of returned identifiers does not match the number of provided identifiers, the missing ones are in a bad format</li> <li>If identifiers already exist (while calling the ADD endpoint) or are not present (while calling the DELETE endpoint) no error will be returned</li> <li>For adding new identifiers the rest endpoint accepts the same formats as the --validators flag during startup</li> </ul> </li> <li>You will receive a 400 while only providing bad formatted identifiers</li> <li>Check also the logs which are more verbose if you sent a bad formatted identifier</li> </ol>"},{"location":"configuration/validator-identifiers/","title":"Validator identifiers","text":""},{"location":"configuration/validator-identifiers/#accepted-formats","title":"Accepted formats","text":"<p>The following formats are accepted:</p> <ul> <li>validator index e.g. 123456</li> <li>validator pubkey e.g. 0xaffc434cf8138634a4cd0ef6cb815febd3db25760b1b6c522f9b4aa78e599b60336d7dd2e953192e45d4ac91f66f0723</li> <li>validator index/pubkey with alias e.g. \"123456;my-validator\"</li> </ul>"},{"location":"configuration/validator-identifiers/#separation","title":"Separation","text":"<p>The following separation rules apply while adding multiple identifiers.</p> <ul> <li>Validator identifiers can be separated by comma or space e.g.:<ul> <li><code>--validators 123 456 --validators 678 999</code></li> <li><code>--validators 123,456 --validators 678,999</code></li> </ul> </li> <li>If you provide a validator identifier with an alias you need to wrap the whole string of one identifier-alias-pair in quotes or double quotes e.g.:<ul> <li><code>--validators \"123;val1\" \"456;val2\" --validators 678 999</code> or</li> <li><code>--validators '123;val1','456;val2' --validators 678,999</code></li> </ul> </li> </ul> <p>Note: Wrapping an identifier-alias-pair in additional quotes or double quotes (beside the necessary double quotes for yaml) is not true for a <code>docker-compose</code>. Please check the example compose files provided in the docker folder.</p>"},{"location":"configuration/validator-identifiers/#validators-file","title":"Validators file","text":"<p>File where each validator identifier is saved on a separate line. Formats are accepted as described above.</p> <p>Example:</p> <pre><code>15105\n251427 ; GO_FOR_IT\n234;My_Validator\n0x99f094ff7dc4b521a5075fa03ca1fe468546dfe053124d88187cce6de3332c7d65e4b0738cd85e037d7cbbc48c6645eb\n</code></pre>"},{"location":"configuration/validator-identifiers/#validator-nodes","title":"Validator nodes","text":"<p>Path to a file containing connection information (<code>URL;BEARER</code>) for validator nodes to fetch the validator identifiers (pubkeys) managed by the respective node. The data is retrieved via the keymanager api from the respective node. This approach eliminates the need to manually provide validator identifiers using <code>--validators</code> or <code>--validators-file</code>. Additionally, the managed validator identifiers and their status are updated regularly. By default, updates occur once per day, but this can be adjusted using the <code>--validator-update-interval</code> setting. This feature is particularly beneficial for professional node operators managing a large and fluctuating number of validators.</p> <p>Note, you can supply additional validators via one of the other two cli flags (<code>--validators</code>, <code>--validators-file</code>).</p>"},{"location":"configuration/validator-identifiers/#supported-clients-remote-signer","title":"Supported clients / remote signer","text":"<p>Not all clients support the keymanager api yet. Furthermore, I did not had the time yet to test all clients/remote signers.</p> client tested compatible prysm lighthouse teku nimbus lodestar grandine vouch web3signer dirk"},{"location":"configuration/validator-identifiers/#notes","title":"Notes","text":"<ol> <li>There are some issues with prysm currently. More specifically, if you use prysm but validators are managed by a remote signer, eth-duties will not work since the respective endpoint is broken. If validators are managed locally everything works as expected. This issue will be fixed in version <code>v5.1.3</code>.</li> </ol>"},{"location":"configuration/validator-identifiers/#file-structure","title":"File structure","text":"<p>The validator nodes file needs to be structured like this:</p> <pre><code>http://localhost:5062;234ddgret353f23r\nhttp://192.168.0.1:5062;34547342erg45g57\nhttps://my-awesome-validator-node;234723022hnfn\n</code></pre>"},{"location":"configuration/validator-identifiers/#keymanager-api","title":"Keymanager API","text":"<p>The keymanager API is not enabled by default, and the quality of documentation varies across different clients. Below is a list of documentation chapters that explain how to enable the API for each client/remote signer:</p> <ul> <li>lighthouse</li> <li>teku</li> <li>nimbus</li> <li>lodestar</li> <li>prysm</li> <li>web3signer</li> </ul> <p>Note: Ensure you fully understand the process before activating the API. Accidentally exposing endpoints to the public can allow external parties to exit or delete your validators. Eth-duties only accesses three getter endpoints of the keymanager api. To verify that Eth-Duties cannot delete any of your keys or exit your validators, you can search for the corresponding modifier endpoints in the GitHub repository.</p>"},{"location":"configuration/validator-identifiers/#caveat","title":"Caveat","text":"<ol> <li>If <code>eth-duties</code> attempts to update the validator identifiers from the provided list of validator nodes and one or more nodes are not accessible, it will delete all identifiers for those nodes internally until they become reachable again. I have an idea for optimizing this behavior to retain the previous state of validator identifiers when a node is unavailable. However, implementing this improvement will require some code refactoring and, consequently, time.</li> <li>If all validator nodes are unreachable, eth-duties will enter a dead state and will remain in this state even if the nodes come back online. The aforementioned optimization will address this issue as well. To avoid the dead state currently, you need to provide one or more validators via <code>--validators</code>.</li> <li>Currently, you cannot supply aliases with --validator-nodes. This might change in future updates.</li> </ol>"},{"location":"usage/binary/","title":"Binary","text":"<p>Just download the artifact for your OS and start optimizing your validator maintenance periods. The example commands are based on calls on the linux binary (don't forget to make it executable).</p>"},{"location":"usage/binary/#examples","title":"Examples","text":"<ol> <li> <p>Print the help:</p> <pre><code>./eth-duties --help\n</code></pre> </li> <li> <p>Print upcoming duties for two validators while connecting to a local beacon client:</p> <pre><code>./eth-duties \\\n--validators &lt;VALIDATOR_INDEX_1&gt; &lt;VALIDATOR_INDEX_2&gt; \\\n--beacon-node http://localhost:5052\n</code></pre> </li> <li> <p>Print upcoming duties for multiple validators using different identifiers while connecting to a local beacon client:</p> <pre><code># You can mix up indices and pubkeys as you like\n# You can add the flag '--validators' multiple times\n./eth-duties \\\n--validators &lt;VALIDATOR_INDEX_1&gt; &lt;VALIDATOR_INDEX_2&gt; \\\n--validators &lt;VALIDATOR_PUBKEY_3&gt; &lt;VALIDATOR_INDEX_4&gt; \\\n--beacon-node http://localhost:5052\n</code></pre> </li> <li> <p>Print upcoming duties for multiple validators using an alias for some of the provided validators while connecting to a local beacon client:</p> <pre><code># If you want to set an alias for a validator pubkey or index you need to separate the index/pubkey from the alias with an ';'\n# Furthermore you need to put the expression in quotes or double quotes\n./eth-duties \\\n--validators \"&lt;VALIDATOR_INDEX_1&gt;;VALIDATOR_1\" &lt;VALIDATOR_INDEX_2&gt; \\\n--validators \"&lt;VALIDATOR_PUBKEY_3&gt;;VALIDATOR_3\" &lt;VALIDATOR_INDEX_4&gt; \\\n--beacon-node http://localhost:5052\n</code></pre> </li> <li> <p>Print upcoming duties for validators which indices/pubkeys are located in a file:</p> <pre><code># Mixing indices and pubkeys and/or adding aliases is also supported in files\n# Note that you do not need to put '&lt;INDEX_OR_PUBKEY&gt;;&lt;ALIAS&gt;' in quotes or double quotes in your validators file\n./eth-duties \\\n--validators-file &lt;PATH_TO_VALIDATOR_FILE&gt; \\\n--beacon-node http://localhost:5052\n</code></pre> </li> <li> <p>Print upcoming validator duties but omit attestation duties:</p> <pre><code># Note: If you provide more than 50 validators, attestation related logs are omitted by default\n# This can be changed with '--max-attestation-duty-logs'\n./eth-duties \\\n--validators-file &lt;PATH_TO_VALIDATOR_FILE&gt; \\\n--beacon-node http://localhost:5052 \\\n--omit-attestation-duties\n</code></pre> </li> </ol>"},{"location":"usage/binary/#compatibility","title":"Compatibility","text":"OS Tested Works MacOS 11 MacOS 12 Ubuntu 20.04 Ubuntu 22.04 Windows 7 Windows 10 Windows 11 <p>I would love to get feedback from the community, especially for the missing OS I couldn't test.</p>"},{"location":"usage/binary/#build-on-your-own","title":"Build on your own","text":"<p>You can build the binary/executable on your own. This will work out of the box if you installed all dev dependencies (see installation).</p> <p>Note: Pyinstaller uses the OS where it runs on to build the respective artefact. So if you are on a windows machine you will build an executable of eth-duties.</p> <p>As always you need to navigate to the root folder of this repository first. Make sure you are in the correct virtual environment where you installed the dependencies.</p> <ol> <li> <p>Build Windows executable</p> <pre><code>poetry run pyinstaller --clean --onefile --copy-metadata eth-typing --add-data config;config --name eth-duties .\\duties\\main.py\n</code></pre> </li> <li> <p>Build Linux or MacOS binary</p> <pre><code>poetry run pyinstaller --clean --onefile --copy-metadata eth-typing --add-data config:config --name eth-duties ./duties/main.py\n</code></pre> </li> </ol>"},{"location":"usage/docker/","title":"Docker","text":"<p>The docker image repository can be found here.</p>"},{"location":"usage/docker/#build-image","title":"Build image","text":"<p>If you want to build on your own:</p> <pre><code>docker buildx build -t tobiwo/eth-duties:latest -f docker/dockerfile .\n</code></pre>"},{"location":"usage/docker/#run-in-docker","title":"Run in Docker","text":"<ol> <li> <p>Run container using space separation for --validators</p> <pre><code>docker run \\\n--rm \\\n--name eth-duties \\\ntobiwo/eth-duties:latest \\\n--validators 123456 456789 \\\n--validators 0x98... \\\n--validators \"111;My_Validator\" \"222;Validator2\" \\\n--beacon-node http://localhost:5052\n</code></pre> </li> <li> <p>Run container on boot using comma separation for --validators</p> <pre><code>docker run \\\n-d \\\n--restart always \\\n--name eth-duties \\\ntobiwo/eth-duties:latest \\\n--validators 123456,456789 \\\n--validators \"111;My_Validator\",\"222;Validator2\" \\\n--beacon-node http://localhost:5052\n</code></pre> </li> <li> <p>Print logs</p> <pre><code>docker logs eth-duties --tail=20 -f\n</code></pre> </li> </ol>"},{"location":"usage/docker/#docker-compose","title":"Docker compose","text":"<p>You can find multiple <code>docker-compose</code> examples/templates in the <code>docker</code> folder of this repository. Please see the example description in the header of the respective file. You need to replace all placeholders with actual values before using it. If you do not copy the compose to your own setup the commands for starting the container would be (from the root of this repo):</p> <pre><code># Using compose plugin for docker\ndocker compose -f docker/compose.yaml up -d\n\n# Using docker-compose binary\ndocker-compose -f docker/compose.yaml up -d\n</code></pre>"}]}